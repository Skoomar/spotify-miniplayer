[{"C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\index.js":"1","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\DataLayer.js":"2","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\App.js":"3","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\reportWebVitals.js":"4","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\reducer.js":"5","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\spotify.js":"6","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\Login.js":"7","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\Player.js":"8","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\Body.js":"9","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\Header.js":"10","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\SongRow.js":"11","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\Controls.js":"12","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\PlaylistBar.js":"13","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\PlaylistBarOption.js":"14"},{"size":692,"mtime":1611364608010,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1611365106623,"results":"17","hashOfConfig":"16"},{"size":2425,"mtime":1611621655421,"results":"18","hashOfConfig":"16"},{"size":362,"mtime":1611246634933,"results":"19","hashOfConfig":"16"},{"size":1967,"mtime":1611621661453,"results":"20","hashOfConfig":"16"},{"size":1433,"mtime":1611538829362,"results":"21","hashOfConfig":"16"},{"size":482,"mtime":1611538829380,"results":"22","hashOfConfig":"16"},{"size":565,"mtime":1611601723595,"results":"23","hashOfConfig":"16"},{"size":2458,"mtime":1611601670031,"results":"24","hashOfConfig":"16"},{"size":527,"mtime":1611600879026,"results":"25","hashOfConfig":"16"},{"size":607,"mtime":1611597650774,"results":"26","hashOfConfig":"16"},{"size":6234,"mtime":1611621643337,"results":"27","hashOfConfig":"16"},{"size":1362,"mtime":1611603067658,"results":"28","hashOfConfig":"16"},{"size":367,"mtime":1611603067676,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1xrwaon",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\index.js",[],["65","66"],"C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\DataLayer.js",[],"C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\App.js",["67","68"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Login from \"./components/Login\";\r\nimport { getTokenFromUrl } from \"./spotify\";\r\nimport SpotifyWebApi from \"spotify-web-api-js\";\r\nimport Player from \"./components/Player\";\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\n\r\nconst spotify = new SpotifyWebApi();\r\n\r\nfunction App() {\r\n    // set up variable token and its 'set' function as a state variable (using the manner in which you would for a functional component (because that's what this is))\r\n    // const [token, setToken] = useState();\r\n\r\n    const [{ user, token }, dispatch] = useDataLayerValue();\r\n\r\n    // useEffect block used so that the access token is only taken from URL once upon the loading of the page\r\n    useEffect(() => {\r\n        const hash = getTokenFromUrl();\r\n        // set the URL to empty so it doesn't show the access token - hiding access tokens keeps the app secure\r\n        window.location.hash = \"\";\r\n        const _token = hash.access_token;\r\n\r\n        if (_token) {\r\n            dispatch({\r\n                type: \"SET_TOKEN\",\r\n                token: _token,\r\n            });\r\n            // console.log(\"[token]\", token);\r\n            // setToken(_token);\r\n            // tell the API what our token is for when it access Spotify Services\r\n            spotify.setAccessToken(_token);\r\n\r\n            // Use the React Context thingy with DataLayer thingy and reducer thingy\r\n            spotify.getMe().then((user) => {\r\n                dispatch({\r\n                    type: \"SET_USER\",\r\n                    user,\r\n                });\r\n            });\r\n            spotify.getUserPlaylists().then((playlists) => {\r\n                dispatch({\r\n                    type: \"SET_PLAYLISTS\",\r\n                    playlists,\r\n                });\r\n            });\r\n            spotify.getPlaylist().then((playlist) => {\r\n                dispatch({\r\n                    type: \"SET_DISCOVER_WEEKLY\",\r\n                    discover_weekly: playlist,\r\n                });\r\n            });\r\n            dispatch({\r\n                type: \"SET_SPOTIFY\",\r\n                spotify: spotify,\r\n            })\r\n        }\r\n    }, [token, dispatch])\r\n\r\n    return (\r\n        // Shows the login page if not logged in, else shows the player\r\n        <div className=\"App\">\r\n            {token ? <Player spotify={spotify}/> : <Login />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\reportWebVitals.js",[],"C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\reducer.js",[],"C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\spotify.js",[],"C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\Login.js",[],"C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\Player.js",["69"],"import React from \"react\";\r\nimport \"../styles/Player.css\";\r\nimport PlaylistBar from \"./PlaylistBar\";\r\nimport Header from \"./Header\";\r\nimport Body from \"./Body\";\r\nimport Controls from \"./Controls\";\r\n\r\nfunction Player({ spotify }) {\r\n    return (\r\n        <div className=\"player\">\r\n            <div className=\"player__body\">\r\n                <PlaylistBar />\r\n                {/*<Header spotify={spotify}/>*/}\r\n                <Body spotify={spotify}/>\r\n            </div>\r\n            <Controls spotify={spotify}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Player;","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\Body.js",[],"C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\Header.js",["70"],"import React from \"react\";\r\nimport \"../styles/Header.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { useDataLayerValue } from \"../DataLayer\";\r\n\r\nfunction Header() {\r\n    const [{ user }, dispatch] = useDataLayerValue();\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header__right\">\r\n                <Avatar src={user?.images[0]?.url} alt={user?.display_name} />\r\n                <h4>{user?.display_name}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\SongRow.js",[],["71","72"],"C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\Controls.js",["73","74","75"],"import React, {useEffect} from \"react\";\r\nimport \"../styles/Controls.css\";\r\nimport {\r\n    PlayCircleOutline,\r\n    PauseCircleOutline,\r\n    SkipPrevious,\r\n    SkipNext,\r\n    Shuffle,\r\n    Repeat,\r\n    RepeatOne,\r\n    VolumeDown,\r\n} from \"@material-ui/icons\";\r\nimport {Grid, Slider} from \"@material-ui/core\";\r\nimport {useDataLayerValue} from \"../DataLayer\";\r\n\r\n\r\nfunction Controls({spotify}) {\r\n    const [{token, item, playing, progress, shuffle_state, repeat_state}, dispatch] = useDataLayerValue();\r\n\r\n    useEffect(() => {\r\n        spotify.getMyCurrentPlaybackState().then((r) => {\r\n            // console.log(r);\r\n\r\n            dispatch({\r\n                type: \"SET_PLAYING\",\r\n                playing: r.is_playing,\r\n            });\r\n\r\n            dispatch({\r\n                type: \"SET_PROGRESS\",\r\n                progress: r.progress_ms,\r\n            });\r\n\r\n            dispatch({\r\n                type: \"SET_ITEM\",\r\n                item: r.item,\r\n            });\r\n\r\n            dispatch({\r\n                type: \"SET_SHUFFLE\",\r\n                shuffle_state: r.shuffle_state,\r\n            });\r\n\r\n            dispatch({\r\n                type: \"SET_REPEAT\",\r\n                repeat_state: r.repeat_state,\r\n            });\r\n        });\r\n    }, [spotify, item]);\r\n\r\n    const playPause = () => {\r\n        if (playing) {\r\n            spotify.pause();\r\n            dispatch({\r\n                type: \"SET_PLAYING\",\r\n                playing: false,\r\n            });\r\n        } else {\r\n            spotify.play();\r\n            dispatch({\r\n                type: \"SET_PLAYING\",\r\n                playing: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    const playNextTrack = () => {\r\n        spotify.skipToNext();\r\n        spotify.getMyCurrentPlayingTrack().then((r) => {\r\n            dispatch({\r\n                type: \"SET_ITEM\",\r\n                item: r.item,\r\n            });\r\n            dispatch({\r\n                type: \"SET_PLAYING\",\r\n                playing: true,\r\n            });\r\n        });\r\n    };\r\n\r\n    const playPreviousTrack = () => {\r\n        spotify.skipToPrevious();\r\n        spotify.getMyCurrentPlayingTrack().then((r) => {\r\n            dispatch({\r\n                type: \"SET_ITEM\",\r\n                item: r.item,\r\n            });\r\n            dispatch({\r\n                type: \"SET_PLAYING\",\r\n                playing: true,\r\n            });\r\n        });\r\n    };\r\n\r\n    const setShuffle = () => {\r\n        spotify.setShuffle(!shuffle_state)\r\n        spotify.getMyCurrentPlaybackState().then((r) => {\r\n            dispatch({\r\n                type: \"SET_SHUFFLE\",\r\n                shuffle_state: !shuffle_state,\r\n            });\r\n        });\r\n    };\r\n\r\n    const setRepeat = () => {\r\n        let new_repeat_state;\r\n        if (repeat_state === \"off\") {\r\n            new_repeat_state = \"context\";\r\n        } else if (repeat_state === \"context\") {\r\n            new_repeat_state = \"track\";\r\n        } else {\r\n            new_repeat_state = \"off\";\r\n        }\r\n        spotify.setRepeat(new_repeat_state)\r\n        spotify.getMyCurrentPlaybackState().then((r) => {\r\n            dispatch({\r\n                type: \"SET_REPEAT\",\r\n                repeat_state: new_repeat_state,\r\n            });\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"controls\">\r\n            <div className=\"controls__left\">\r\n                <img\r\n                    className=\"controls__albumLogo\"\r\n                    src={item?.album.images[0].url}\r\n                    alt={item?.name}\r\n                />\r\n                {item ? (\r\n                    <div className=\"controls__songInfo\">\r\n                        <h4>{item.name}</h4>\r\n                        {/* join if there's multiple artists*/}\r\n                        <p>{item.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"controls__songInfo\">\r\n                        <h4>No song playing</h4>\r\n                        <p>...</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"controls__center\">\r\n                {shuffle_state ? (\r\n                    <Shuffle className=\"controls__green\" onClick={setShuffle}/>\r\n                ) : (\r\n                    <Shuffle className={\"controls__icon\"} onClick={setShuffle}/>\r\n                )}\r\n                <SkipPrevious className=\"controls__icon\" onClick={playPreviousTrack}/>\r\n                {playing ? (\r\n                    <PauseCircleOutline fontSize=\"large\" className=\"controls__icon\"\r\n                                        onClick={playPause}/>\r\n                ) : (\r\n                    <PlayCircleOutline fontSize=\"large\" className=\"controls__icon\"\r\n                                       onClick={playPause}/>\r\n                )}\r\n                <SkipNext className=\"controls__icon\" onClick={playNextTrack}/>\r\n                {\r\n                    (() => {\r\n                        switch (repeat_state) {\r\n                            case \"track\" : return <RepeatOne className=\"controls__green\" onClick={setRepeat}/>;\r\n                            case \"context\" : return <Repeat className=\"controls__green\" onClick={setRepeat}/>;\r\n                            default : return <Repeat className=\"controls__icon\" onClick={setRepeat}/>;\r\n                        }\r\n                    })()\r\n                }\r\n                {/*{if (repeat_state === \"off\") {*/}\r\n                {/*    return (<Repeat className=\"controls__icon\" onClick={setRepeat}/>)*/}\r\n                {/*} else if (repeat_state === \"track\") {(*/}\r\n                {/*    <Repeat className=\"controls__green\" onClick={setRepeat}/>*/}\r\n                {/*)} else {*/}\r\n                {/*    (<RepeatOne className=\"controls__green\" onClick={setRepeat}/>)*/}\r\n                {/*}}*/}\r\n\r\n            </div>\r\n            <div className=\"controls__right\">\r\n                <Grid container spacing={2}>\r\n                    <Grid item>\r\n                        <VolumeDown/>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Slider/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Controls;","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\PlaylistBar.js",["76"],"import React from \"react\";\r\nimport \"../styles/PlaylistBar.css\";\r\nimport PlaylistBarOption from \"./PlaylistBarOption\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { LibraryMusic } from \"@material-ui/icons\";\r\nimport { useDataLayerValue } from \"../DataLayer\";\r\n\r\nfunction PlaylistBar() {\r\n    // use values from the data layer for playlists\r\n    const [{ playlists }, dispatch] = useDataLayerValue();\r\n\r\n    return (\r\n        <div className=\"playlistBar\">\r\n            <img\r\n                className=\"playlistBar__logo\"\r\n                src=\"https://music-b26f.kxcdn.com/wp-content/uploads/2017/06/635963274692858859903160895_spotify-logo-horizontal-black.jpg\"\r\n                alt=\"Spotify Logo\"\r\n            />\r\n\r\n            <PlaylistBarOption title=\"Home\" Icon={HomeIcon} />\r\n            <PlaylistBarOption title=\"Search\" Icon={SearchIcon} />\r\n            <PlaylistBarOption title=\"Your Library\" Icon={LibraryMusic} />\r\n            <br />\r\n            <strong className=\"playlistBar__title\">Playlists</strong>\r\n            <hr />\r\n            {/* map through each playlist to display them on the sidebar*/}\r\n            {playlists?.items?.map((playlist) => (\r\n                <PlaylistBarOption title={playlist.name} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlaylistBar;","C:\\Users\\umar_\\WebstormProjects\\spotify-miniplayer\\src\\components\\PlaylistBarOption.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":1,"column":28,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"85","line":15,"column":14,"nodeType":"83","messageId":"84","endLine":15,"endColumn":18},{"ruleId":"81","severity":1,"message":"86","line":4,"column":8,"nodeType":"83","messageId":"84","endLine":4,"endColumn":14},{"ruleId":"81","severity":1,"message":"87","line":7,"column":22,"nodeType":"83","messageId":"84","endLine":7,"endColumn":30},{"ruleId":"77","replacedBy":"88"},{"ruleId":"79","replacedBy":"89"},{"ruleId":"81","severity":1,"message":"90","line":18,"column":13,"nodeType":"83","messageId":"84","endLine":18,"endColumn":18},{"ruleId":"81","severity":1,"message":"91","line":18,"column":35,"nodeType":"83","messageId":"84","endLine":18,"endColumn":43},{"ruleId":"92","severity":1,"message":"93","line":49,"column":8,"nodeType":"94","endLine":49,"endColumn":23,"suggestions":"95"},{"ruleId":"81","severity":1,"message":"87","line":11,"column":27,"nodeType":"83","messageId":"84","endLine":11,"endColumn":35},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'Header' is defined but never used.","'dispatch' is assigned a value but never used.",["96"],["97"],"'token' is assigned a value but never used.","'progress' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["98"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},"Update the dependencies array to be: [spotify, item, dispatch]",{"range":"101","text":"102"},[1247,1262],"[spotify, item, dispatch]"]